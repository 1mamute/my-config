# code: language=ansible
---
- name: Install and configure text editors/IDEs
  hosts: localhost
  vars:
    # Mirror server for fetching the public keys and the Visual Studio Code
    # installation package. The URL may include directories. The URL must not end
    # with a trailing slash.
    visual_studio_code_mirror: 'https://packages.microsoft.com'
  tasks:
    - name: Create APT keyrings dir
      become: true
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "u=rwx,go=rx"

    - name: Install github3.py python package
      # Necessário para rodar o community.general.github_release
      ansible.builtin.pip:
        name: github3.py
        state: present

    # NodeJS (necessário para neovim e vscode)
    - name: Get latest release of nvm public repo
      community.general.github_release:
        user: nvm-sh
        repo: nvm
        action: latest_release
      register: nvm_latest_release

    - name: Clone or update nvm repo # noqa: latest
      ansible.builtin.git:
        repo: https://github.com/nvm-sh/nvm.git
        single_branch: true
        dest: "{{ ansible_env.HOME }}/.nvm"
        version: "{{ nvm_latest_release.tag }}"
        depth: 1

    - name: Check new nvm installed version # noqa: command-instead-of-shell
      ansible.builtin.shell: zsh -ic 'command -v nvm'
      changed_when: false

    - name: Install lts node version with nvm # noqa: command-instead-of-shell
      ansible.builtin.shell: zsh -ic 'nvm install --lts'
      register: nvm_install_response
      changed_when: "'already installed' not in nvm_install_response.stderr and nvm_install_response.rc == 0"

    # Test is there is a default already set
    - name: Is there a default already set # noqa: command-instead-of-shell
      ansible.builtin.shell: zsh -ic 'cat {{ ansible_env.HOME }}/.nvm/alias/default'
      register: mg_nvm_default_response
      changed_when: "mg_nvm_default_response.rc != 0"

    - name: Set lts node version as default with nvm # noqa: command-instead-of-shell
      ansible.builtin.shell: zsh -ic 'nvm alias default lts/\* --no-colors'
      changed_when: "'lts/*' not in mg_nvm_default_response.stdout"

    # Visual Studio Code
    - name: Download microsoft key (apt)
      become: true
      ansible.builtin.get_url:
        url: "{{ visual_studio_code_mirror }}/keys/microsoft.asc"
        dest: /etc/apt/keyrings/microsoft.asc
        mode: "u=rw,go=r"
        force: true

    - name: Install VS Code repo (apt)
      become: true
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch=amd64 trusted=true signed-by=/etc/apt/keyrings/microsoft.asc]
          {{ visual_studio_code_mirror }}/repos/code stable main
        filename: vscode
        state: present

    - name: Install VS Code (apt)
      become: true
      ansible.builtin.apt:
        name: code
        state: present

    # Neovim
    - name: Get latest release of neovim public repo
      community.general.github_release:
        user: neovim
        repo: neovim
        action: latest_release
      register: nvim_latest_release

    - name: Check nvim installed version
      ansible.builtin.shell: nvim --version | head -1 | grep -o 'v[0-9]\.[0-9]\.[0-9]'
      ignore_errors: true
      changed_when: false
      register: nvim_check_result

    - name: Get latest nvim release tarball
      become: true
      when: nvim_check_result.stdout is version(nvim_latest_release.tag, "<")
      ansible.builtin.get_url:
        url: "https://github.com/neovim/neovim/releases/download/{{ nvim_latest_release.tag }}/nvim-linux64.tar.gz"
        dest: /tmp/nvim-linux64.tar.gz
        mode: "u=rw,go=r"

    - name: Extract to path recommended by nvim git repo (/opt)
      become: true
      when: nvim_check_result.stdout is version(nvim_latest_release.tag, "<")
      ansible.builtin.unarchive:
        src: /tmp/nvim-linux64.tar.gz
        dest: /opt

    - name: Create a nvim symbolic link
      when: nvim_check_result.stdout is version(nvim_latest_release.tag, "<")
      become: true
      ansible.builtin.file:
        src: /opt/nvim-linux64/bin/nvim
        dest: /usr/local/bin/nvim
        state: link

    - name: Install python3-neovim package (apt)
      become: true
      ansible.builtin.package:
        name: python3-neovim
        state: present

    - name: Install pynvim python package
      # Necessário para rodar o community.general.github_release
      ansible.builtin.pip:
        name: pynvim
        state: present
        extra_args: --upgrade

    # para o coc-ansible
    - name: Install ansible-lint,  yamllint package
      ansible.builtin.pip:
        name:
          - yamllint
          - ansible-lint
        state: present

    # para o coc-pyright
    - name: Install ruff-lsp package
      ansible.builtin.pip:
        name: ruff-lsp
        state: present

    # confirmar mas acho que é requisito do coc
    - name: Install "neovim" node.js package globally.
      community.general.npm:
        name: neovim
        global: true

    # Requisitos do telescope
    - name: Check if ripgrep installed
      ansible.builtin.command: rg --version
      ignore_errors: true
      changed_when: false
      register: rg_check_result

    - name: Get latest release of ripgrep public repo
      when: rg_check_result.rc != 0
      community.general.github_release:
        user: BurntSushi
        repo: ripgrep
        action: latest_release
      register: ripgrep_latest_release

    - name: Get ripgrep latest release deb
      when: rg_check_result.rc != 0
      ansible.builtin.get_url:
        url: "https://github.com/BurntSushi/ripgrep/releases/download/{{ ripgrep_latest_release.tag }}/ripgrep_{{ ripgrep_latest_release.tag }}-1_amd64.deb"
        dest: "/tmp/ripgrep_{{ ripgrep_latest_release.tag }}_amd64.deb"
        mode: "u=rw,go=r"

    - name: Install a .deb package
      when: rg_check_result.rc != 0
      become: true
      ansible.builtin.apt:
        deb: "/tmp/ripgrep_{{ ripgrep_latest_release.tag }}_amd64.deb"

    - name: Update ripgrep package (apt)
      become: true
      ansible.builtin.package:
        name: ripgrep
        state: present

    - name: Install fd-find package (apt) # para o telescope
      become: true
      ansible.builtin.package:
        name: fd-find
        state: present

# Setting VS Code as the default text editor
# xdg-open
# You can set the default text editor for text files (text/plain) that is used by xdg-open with the following command:

# xdg-mime default code.desktop text/plain
# Debian alternatives system
# Debian-based distributions allow setting a default editor using the Debian alternatives system, without concern for the MIME type. You can set this by running the following and selecting code:

# sudo update-alternatives --set editor /usr/bin/code
# If Visual Studio Code doesn't show up as an alternative to editor, you need to register it:

# sudo update-alternatives --install /usr/bin/editor editor $(which code) 10
